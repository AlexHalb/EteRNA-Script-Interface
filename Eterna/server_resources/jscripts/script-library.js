// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.onmessage = function(event) {
    var Lib, data, result;
    try {
      data = event.data;
      Lib = new Library;
      Lib.webworker = true;
      result = "Return value : " + (eval(data));
    } catch (Error) {
      result = Error.message;
    }
    return postMessage(result);
  };

  this.Library = (function() {

    function Library() {
      this.bases = 'AGCU';
      this.webworker = false;
    }

    Library.prototype.fold = function(seq) {
      if (!this.webworker) {
        return document.getElementById('viennalib').fold(seq);
      } else {
        return postMessage({
          cmd: "Lib.fold",
          arg: seq
        });
      }
    };

    Library.prototype.energyOfStruct = function(sequence, structure) {
      return document.getElementById('viennalib').energyOFStruct(sequence, structure);
    };

    Library.prototype.replace = function(seq, index, to) {
      if (typeof seq === "string") {
        return seq.substring(0, index) + to + seq.substring(index + 1, seq.length);
      }
      if (typeof seq === "object") {
        seq[index] = to;
        return seq;
      }
    };

    Library.prototype.nextSequence = function(seq) {
      return this.nextSequenceWithBases(seq, this.bases);
    };

    Library.prototype.nextSequenceWithBases = function(seq, bases) {
      var next_, replace_;
      replace_ = this.replace;
      next_ = function(seq, index) {
        if (seq[index] === bases[3]) {
          return next_(replace_(seq, index, bases[0]), ++index);
        } else {
          return replace_(seq, index, bases[bases.indexOf(seq[index]) + 1]);
        }
      };
      return next_(seq, 0);
    };

    Library.prototype.random = function(from, to) {
      return Math.floor((Math.random() * (to - from + 1)) + from);
    };

    Library.prototype.randomSequence = function(size) {
      return this.randomSequenceWithBases(size, this.bases);
    };

    Library.prototype.randomSequenceWithBases = function(size, bases) {
      var i, sequence, _i, _ref;
      sequence = "";
      for (i = _i = 0, _ref = size - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        sequence += bases[this.random(0, bases.length - 1)];
      }
      return sequence;
    };

    Library.prototype.map = function(fn, sequence) {
      var i, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = sequence.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(fn(sequence[i], i));
      }
      return _results;
    };

    Library.prototype.filter = function(fn, sequence) {
      var i, result, _i, _ref;
      result = "";
      for (i = _i = 0, _ref = sequence.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (fn(sequence[i])) {
          result += sequence[i];
        }
      }
      return result;
    };

    Library.prototype.splitDefault = function(structure) {
      var i, index, item, result, _i, _ref;
      result = new Array;
      item = structure[0];
      index = 0;
      for (i = _i = 0, _ref = structure.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (item !== structure[i] || i === structure.length) {
          item = structure[i];
          result.push(structure.substring(index, i));
          index = i;
        }
      }
      return result;
    };

    Library.prototype.join = function(array) {
      var item, result, _i, _len;
      result = "";
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        item = array[_i];
        result += item;
      }
      return result;
    };

    Library.prototype.set = function(fn, structure) {
      var array,
        _this = this;
      array = this.split(structure);
      this.map(function(item, index) {
        return fn(array, item, index);
      }, array);
      return array;
    };

    Library.prototype.distance = function(source, destination) {
      var _this = this;
      return this.distanceCustom(function(index) {
        if (source[index] === destination[index]) {
          return 0;
        } else {
          return 1;
        }
      }, source, destination);
    };

    Library.prototype.distanceCustom = function(fn, source, destination) {
      var sum,
        _this = this;
      if (source.length === destination.length) {
        sum = 0;
        this.map(function(_, index) {
          return sum += fn(index);
        }, source);
        return sum;
      }
      return -1;
    };

    Library.prototype.getStructure = function(nid) {
      var data;
      data = AjaxManager.querySync("GET", Application.GET_URI, {
        type: "puzzle",
        nid: nid
      });
      data = data['data'];
      if (data && data['puzzle'] && data['puzzle']['secstruct']) {
        return data['puzzle']['secstruct'];
      } else {
        throw new RNAException("Puzzle not found!!");
      }
    };

    Library.prototype.getStructureWithAsync = function(nid, success_cb) {
      return PageData.get_puzzle(nid, function(data) {
        return success_cb(data['puzzle']['secstruct']);
      });
    };

    Library.prototype.EternaScript = function(id) {
      return eval(this.EternaScriptSource(id));
    };

    Library.prototype.EternaScriptSource = function(id) {
      var code, data, i, input, inputs, script, _i;
      data = Script.get_script_sync(id);
      script = data['script'][0];
      code = "";
      if (script['input']) {
        inputs = JSON.parse(script['input']);
        for (i = _i = 0; _i <= 0; i = ++_i) {
          input = inputs[i];
          code += "var " + input['value'] + "=arguments[" + i + "];";
        }
      }
      code = "function _" + id + "(){Lib = new Library();" + code + script['source'] + "};_" + id;
      return code;
    };

    return Library;

  })();

  this.RNAElement = (function() {

    RNAElement.Loop = "loop";

    RNAElement.Stack = "stack";

    RNAElement.Hairpin = "Hairpin";

    RNAElement.Bulge = "Bulge";

    RNAElement.Internal = "Internal";

    RNAElement.Multiloop = "Multiloop";

    RNAElement.Dangling = "Dangling";

    function RNAElement(index, _structure) {
      this.parent = null;
      this.childs = new Array;
      this.elements = new Array;
      this.segment_count = 1;
      this.type = null;
      this.base_type = null;
      this.add(index, _structure);
    }

    RNAElement.prototype.add = function(_index, _structure) {
      var elements, i, _i, _pair, _ref;
      _pair = void 0;
      elements = this.getElements();
      if (elements.length > 0) {
        if (_structure === "." && Math.abs(elements[elements.length - 1]['index'] - _index) > 1) {
          this.setSegmentCount(this.getSegmentCount() + 1);
        }
        if (_structure === ")") {
          for (i = _i = _ref = elements.length - 1; _i >= 0; i = _i += -1) {
            if (elements[i]['pair'] === void 0) {
              elements[i]['pair'] = _index;
              _pair = elements[i]['index'];
              break;
            }
          }
        }
      }
      return this.getElements().push({
        index: _index,
        structure: _structure,
        pair: _pair
      });
    };

    RNAElement.prototype.addChild = function(node) {
      node.parent = this;
      return this.childs.push(node);
    };

    RNAElement.prototype.getChilds = function() {
      return this.childs;
    };

    RNAElement.prototype.getParent = function() {
      return this.parent;
    };

    RNAElement.prototype.getElements = function() {
      return this.elements;
    };

    RNAElement.prototype.isPaired = function() {
      var elements, i, temp, _i, _ref;
      temp = new Array;
      elements = this.getElements();
      for (i = _i = 0, _ref = elements.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (elements[i]['structure'] === "(") {
          temp.push(i);
        } else if (elements[i]['structure'] === ")") {
          temp.pop();
        }
      }
      return temp.length === 0;
    };

    RNAElement.prototype.setType = function(type) {
      return this.type = type;
    };

    RNAElement.prototype.getType = function(type) {
      return this.type;
    };

    RNAElement.prototype.setBaseType = function(type) {
      return this.base_type = type;
    };

    RNAElement.prototype.getBaseType = function() {
      return this.base_type;
    };

    RNAElement.prototype.getIndices = function() {
      var array;
      array = new Array;
      this.map(function(element, i) {
        return array.push(element['index']);
      }, this.getElements());
      return array;
    };

    RNAElement.prototype.getStructures = function() {
      var array;
      array = new Array;
      this.map(function(element, i) {
        return array.push(element['structure']);
      }, this.getElements());
      return array;
    };

    RNAElement.prototype.isStack = function() {
      return this.getBaseType() === RNAElement.Stack;
    };

    RNAElement.prototype.isLoop = function() {
      return this.getBaseType() === RNAElement.Loop;
    };

    RNAElement.prototype.isHairpin = function() {
      return this.getType() === RNAElement.Hairpin;
    };

    RNAElement.prototype.isBulge = function() {
      return this.getType() === RNAElement.Bulge;
    };

    RNAElement.prototype.isMultiloop = function() {
      return this.getType() === RNAElement.Multiloop;
    };

    RNAElement.prototype.isDangling = function() {
      return this.getType() === RNAElement.Dangling;
    };

    RNAElement.prototype.isInternal = function() {
      return this.getType() === RNAElement.Internal;
    };

    RNAElement.prototype.getSegmentCount = function() {
      return this.segment_count;
    };

    RNAElement.prototype.setSegmentCount = function(count) {
      return this.segment_count = count;
    };

    RNAElement.prototype.map = function(func, array) {
      return new Library().map(func, array);
    };

    return RNAElement;

  })();

  this.RNA = (function() {

    function RNA(structure) {
      this.structure = structure;
      this.pair_map = this.getPairmap(structure);
      this.root = this.parse(0, structure.length - 1, structure);
      this.parse_type(this.root);
    }

    RNA.prototype.getPairmap = function(structure) {
      var i, index, map, temp, _i, _ref;
      temp = new Array;
      map = new Array;
      for (i = _i = 0, _ref = structure.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (structure[i] === "(") {
          temp.push(i);
        } else if (structure[i] === ")") {
          if (temp.length === 0) {
            throw new RNAException("pair doesn't matched");
          }
          index = temp.pop();
          map[index] = i;
          map[i] = index;
        }
      }
      if (temp.length > 0) {
        throw new RNAException("pair doesn't matched");
      }
      return map;
    };

    RNA.prototype.parse = function(start, end, structure) {
      var parsedElement, root;
      parsedElement = this._parse(start, end, structure);
      root = parsedElement['element'];
      if (parsedElement['index'] >= structure.length - 1) {
        return root;
      } else {
        root.addChild(this.parse(parsedElement['index'] + 1, end, structure));
        return root;
      }
    };

    RNA.prototype._parse = function(start, end, structure) {
      var c, child, dangling, dtest, dtest_i, e, i, temp, temp2, _i, _ref, _ref1;
      c = structure[start];
      e = new RNAElement(start, c);
      e.setBaseType(RNAElement.Loop);
      i = start;
      while (i < end) {
        i++;
        if (c === "(" && (structure[i] === "(" || structure[i] === ")")) {
          if (structure[i] === "(" && this.pair_map[i] !== this.pair_map[i - 1] - 1) {
            temp = this._parse(this.pair_map[i] + 1, this.pair_map[i] - 1, structure);
            temp = temp['element'];
            e.addChild(temp);
            temp2 = this._parse(i, this.pair_map[i], structure);
            temp2 = temp2['element'];
            temp.addChild(temp2);
            i = this.pair_map[i - 1] - 1;
          } else {
            e.add(i, structure[i]);
            if (e.isPaired()) {
              e.setBaseType(RNAElement.Stack);
              return {
                element: e,
                index: i
              };
            }
          }
        } else if (c === "." && structure[i] === ".") {
          if (structure[i] === "." && structure[i - 1] === ".") {
            e.add(i, structure[i]);
          } else {
            dtest = true;
            dangling = new RNAElement(i, c);
            dangling.setBaseType(RNAElement.Loop);
            for (dtest_i = _i = _ref = i + 1, _ref1 = structure.length - 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; dtest_i = _ref <= _ref1 ? ++_i : --_i) {
              if (structure[dtest_i] !== ".") {
                dtest = false;
                break;
              }
              dangling.add(dtest_i, structure[dtest_i]);
            }
            if (dtest) {
              e.addChild(dangling);
              return {
                element: e,
                index: dtest_i
              };
            } else {
              e.add(i, structure[i]);
            }
          }
        } else if (structure[i] === ")") {
          return {
            element: e,
            index: i - 1
          };
        } else {
          child = this._parse(i, end, structure);
          e.addChild(child['element']);
          i = child['index'];
        }
      }
      return {
        element: e,
        index: i
      };
    };

    RNA.prototype.parse_type = function(element) {
      var _this = this;
      return this.map(function(element) {
        var childs, indices, parent;
        parent = element.getParent();
        childs = element.getChilds();
        indices = element.getIndices();
        if ((parent === null || childs.length === 0) && element.isLoop() && (indices[0] === 0 || indices.pop() === _this.getStructure().length - 1)) {
          return element.setType(RNAElement.Dangling);
        } else if (parent && parent.isStack() && childs.length === 1 && childs[0].isStack()) {
          if (element.getSegmentCount() === 1) {
            return element.setType(RNAElement.Bulge);
          } else if (element.getSegmentCount() === 2) {
            return element.setType(RNAElement.Internal);
          }
        } else if (element.getSegmentCount() >= 2 && childs.length >= 2) {
          return element.setType(RNAElement.Multiloop);
        } else if (parent && parent.isStack() && childs.length === 0 && element.isLoop()) {
          if (element.getStructures().length < 3) {
            throw new RNAException("Hairpin length is under 3");
          }
          return element.setType(RNAElement.Hairpin);
        }
      });
    };

    RNA.prototype.getStructure = function() {
      return this.structure;
    };

    RNA.prototype.getRootElement = function() {
      return this.root;
    };

    RNA.prototype.map = function(func) {
      var _map;
      _map = function(element) {
        var childs, i, _i, _ref, _results;
        func(element);
        childs = element.getChilds();
        if (childs.length > 0) {
          _results = [];
          for (i = _i = 0, _ref = childs.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            _results.push(_map(childs[i]));
          }
          return _results;
        }
      };
      return _map(this.root);
    };

    return RNA;

  })();

  this.RNAException = (function(_super) {

    __extends(RNAException, _super);

    function RNAException(message) {
      this.message = message;
      RNAException.__super__.constructor.call(this, message);
    }

    RNAException.prototype.toString = function() {
      return "RNAException: " + this.message;
    };

    return RNAException;

  })(Error);

}).call(this);
