// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  this.Page = {
    _pages_: null,
    current_uri_: null,
    current_parameters_: null,
    active_builders_: new Object(),
    active_parameters_: new Object(),
    active_pages_: new Object(),
    active_page_scrolls_: new Object(),
    active_is_overlay_: new Object(),
    initialized_: false,
    initialize: function() {
      var $body, $content, $head, body_block, body_builder, head_block, page_template_block, page_template_builder,
        _this = this;
      this.initialized_ = true;
      if (head_block = Blocks("head")) {
        $head = $("head");
        head_block.build($head);
      }
      $body = $("body");
      body_block = Blocks("body");
      if (!(body_block != null)) {
        Utils.display_error("Cannot find block 'body'");
        return;
      }
      body_builder = body_block.build($body, {
        "is_logged_in": UserManager.get_current_uid() != null
      });
      $content = body_builder.get_element("content");
      if (!$content.exists()) {
        Utils.display_error("Cannot find content div in 'body'");
        return;
      }
      page_template_block = Blocks("page");
      if (!(page_template_block != null)) {
        Utils.display_error("Cannot find block 'page");
        return;
      }
      page_template_builder = page_template_block.build($content, {
        "is_logged_in": UserManager.get_current_uid() != null
      });
      this.$pages_ = page_template_builder.get_element("pages");
      if (!this.$pages_) {
        Utils.display_error("Cannot find pages in body block");
        return;
      }
      Overlay.initialize($body, body_builder.get_element("page"));
      if (Utils.can_push_state()) {
        return $(window).bind('popstate', function(e) {
          var back_uri;
          back_uri = Utils.to_uri(String(window.location));
          if (back_uri === _this.current_uri_) {
            return;
          }
          return _this.transit(back_uri, _this.active_is_overlay_[back_uri], true);
        });
      }
    },
    match_pageblock: function(page_uri, page_params) {
      var pageblock, uri_without_params;
      uri_without_params = page_uri.match(/\/[^?]*/);
      uri_without_params = uri_without_params.toString();
      return pageblock = BlockManager.get_pageblock(uri_without_params, page_params);
    },
    create: function(pageblock, page_uri, page_params, on_overlay) {
      var $pageslot, builder;
      page_params['is_on_overlay'] = on_overlay;
      page_params['is_logged_in'] = UserManager.get_current_uid() != null;
      if (this.active_pages_[page_uri] && (!this.active_is_overlay_[page_uri] === !on_overlay)) {
        builder = this.active_builders_[page_uri];
        builder.bind_window_callbacks();
        return builder;
      }
      $pageslot = null;
      if (on_overlay) {
        $pageslot = Overlay.get_slot(page_uri);
      } else {
        $pageslot = $("<div style='display:none'>");
      }
      this.active_builders_[page_uri] = builder = pageblock.add_block($pageslot, page_params);
      if (!on_overlay) {
        this.$pages_.append($pageslot);
      }
      builder.bind_window_callbacks();
      this.active_parameters_[page_uri] = page_params;
      this.active_pages_[page_uri] = $pageslot;
      this.active_is_overlay_[page_uri] = on_overlay;
      return builder;
    },
    transit: function(page_uri, on_overlay, dont_push_history) {
      var $page, builder, global_params, key, page_params, pageblock, title, uri, uri_params, uri_without_params, val, was_on_overlay, _ref;
      was_on_overlay = this.active_is_overlay_[this.current_uri_];
      if ((this.current_uri_ != null) && !was_on_overlay) {
        this.save_current_page_scroll();
      }
      Page.unbind_window();
      if (global_params = Application.GLOBAL_THEME_PARAMETERS) {
        page_params = Utils.clone_object(global_params);
      } else {
        page_params = new Object();
      }
      uri_params = Utils.get_url_vars(page_uri);
      for (key in uri_params) {
        if (!__hasProp.call(uri_params, key)) continue;
        val = uri_params[key];
        page_params[key] = val;
      }
      pageblock = this.match_pageblock(page_uri, page_params);
      if (!(pageblock != null)) {
        Utils.display_error("Could not get pageblock for " + page_uri);
        uri_without_params = page_uri.match(/\/[^?]*/);
        uri_without_params = uri_without_params.toString();
        if (uri_without_params !== "/") {
          Utils.redirect_to("/");
        }
        return;
      }
      this.current_parameters_ = page_params;
      if (!this.initialized_) {
        this.initialize();
      }
      builder = this.create(pageblock, page_uri, page_params, on_overlay);
      if (!(builder != null)) {
        Utils.display_error("Cound not get builder for " + page_uri);
        return;
      }
      if ((this.current_uri_ != null) && !dont_push_history) {
        if (Utils.can_push_state()) {
          history.pushState(this.current_uri_, '', page_uri);
        }
      }
      if (on_overlay) {
        Overlay.set_loading();
        Overlay.show();
        if (!this.active_is_overlay_[this.current_uri_]) {
          Overlay.set_return_uri(this.current_uri_);
        }
        $page = this.active_pages_[this.current_uri_];
        Overlay.load_overlay_content(page_uri);
      } else {
        Overlay.set_return_uri(null);
        Overlay.hide();
        _ref = this.active_pages_;
        for (uri in _ref) {
          if (!__hasProp.call(_ref, uri)) continue;
          $page = _ref[uri];
          if (uri === page_uri) {
            $page.css("display", "block");
          } else {
            $page.css("display", "none");
          }
        }
      }
      this.current_uri_ = page_uri;
      if (!on_overlay && !was_on_overlay) {
        this.load_current_page_scroll();
      }
      title = null;
      if (Application.BASE_TITLE != null) {
        title = Application.BASE_TITLE;
      }
      if (title) {
        return Utils.set_title(title);
      }
    },
    get_current_page_parameters: function() {
      return Utils.clone_object(this.current_parameters_);
    },
    get_login_destination: function() {
      return String(window.location);
    },
    save_current_page_scroll: function() {
      if (!(this.current_uri_ != null)) {
        return;
      }
      return this.active_page_scrolls_[this.current_uri_] = $(window).scrollTop();
    },
    load_current_page_scroll: function() {
      var scroll;
      if (!(this.current_uri_ != null)) {
        return;
      }
      if (scroll = this.active_page_scrolls_[this.current_uri_]) {
        if (scroll != null) {
          return $(window).scrollTop(scroll);
        }
      }
    },
    bind_window: function(ev, cb, key_event) {
      var ie_ver,
        _this = this;
      ev = ev.replace(/([^\s]+)/g, function(whole, evmatch) {
        return evmatch + ".custom_event";
      });
      ie_ver = Utils.get_IE_version();
      if (key_event || ((ie_ver != null) && ie_ver <= 7)) {
        return $("body").bind(ev, cb);
      } else {
        return $(window).bind(ev, cb);
      }
    },
    unbind_window: function() {
      $(window).unbind('.custom_event');
      return $("body").unbind('.custom_event');
    },
    redirect_to_root: function() {
      if (Application.ROOT_URL != null) {
        Utils.redirect_to(Application.ROOT_URL);
      }
      return Utils.redirect_to("/");
    },
    is_there_new_notification: function() {
      var user;
      if (user = Application.CURRENT_USER) {
        if (user['Last read notification number'] === "NEW") {
          return true;
        }
      }
      return false;
    }
  };

}).call(this);
