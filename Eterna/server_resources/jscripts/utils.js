// Generated by CoffeeScript 1.3.3
(function() {
  var VideoUrlUtils,
    __hasProp = {}.hasOwnProperty;

  if (typeof Array.prototype.indexOf !== 'function') {
    Array.prototype.indexOf = function(needle) {
      var ii, _i, _ref;
      for (ii = _i = 0, _ref = this.length - 1; _i <= _ref; ii = _i += 1) {
        if (this[ii] === needle) {
          return ii;
        }
      }
      return -1;
    };
  }

  Array.prototype.last = function() {
    if (this.length > 0) {
      return this[this.length - 1];
    }
    return null;
  };

  Array.prototype.get_random = function() {
    return this[Math.floor(Math.random() * this.length) % this.length];
  };

  Array.prototype.clone = function() {
    var ii, new_array, val, _i, _ref;
    new_array = new Array();
    for (ii = _i = 0, _ref = this.length - 1; _i <= _ref; ii = _i += 1) {
      val = this[ii];
      if (typeof val === "object" && val instanceof Array) {
        val = val.clone();
      } else if (typeof val === "object") {
        val = Utils.clone_object(val);
      }
      new_array.push(val);
    }
    return new_array;
  };

  Array.prototype.remove = function(i) {
    return this.splice(i, 1);
  };

  Array.prototype.swap = function(i, j) {
    var array, temp;
    array = this;
    temp = array[i];
    array[i] = array[j];
    return array[j] = temp;
  };

  String.prototype.hash_code = function() {
    var char, hash, i, _i, _ref;
    hash = 0;
    if (this.length === 0) {
      return hash;
    }
    for (i = _i = 0, _ref = this.length - 1; _i <= _ref; i = _i += 1) {
      char = this.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return hash;
  };

  jQuery.fn.extend({
    to_html: function() {
      Utils.display_debug_messge("Why the hell are you using jQuery.to_html?");
      return $('<div>').append(this.clone()).remove().html();
    },
    is_inside: function(x, y) {
      var result,
        _this = this;
      result = false;
      this.eq(0).each(function() {
        var $current, offset;
        $current = $(_this);
        offset = $current.offset();
        return result = offset.left <= x && offset.left + $current.outerWidth() > x && offset.top <= y && offset.top + $current.outerHeight() > y;
      });
      return result;
    }
  });

  this.KeyCode = {
    KEYCODE_DELETE: 46,
    KEYCODE_ENTER: 13,
    KEYCODE_ESCAPE: 27,
    KEYCODE_LEFT_ARROW: 37,
    KEYCODE_RIGHT_ARROW: 39
  };

  this.Utils = {
    display_error: function(msg) {
      alert(msg);
      if ((typeof console !== "undefined" && console !== null) && (console.log != null)) {
        return console.log("console error : " + msg);
      }
    },
    display_debug_message: function(msg) {
      if ((typeof console !== "undefined" && console !== null) && (console.log != null)) {
        return console.log("console debug : " + msg);
      }
    },
    display_message: function(msg) {
      return alert(msg);
    },
    clone_object: function(obj) {
      var key, newobj, value;
      if (typeof obj === "object" && obj instanceof Array) {
        return obj.clone();
      }
      newobj = new Object();
      for (key in obj) {
        if (!__hasProp.call(obj, key)) continue;
        value = obj[key];
        if (typeof value === "object" && value instanceof Array) {
          value = value.clone();
        } else if (typeof value === "object") {
          value = this.clone_object(value);
        }
        newobj[key] = value;
      }
      return newobj;
    },
    add_objects: function(obj1, obj2) {
      var key, obj, val;
      if (!obj1 && !obj2) {
        return null;
      }
      obj = new Object();
      if (obj1) {
        for (key in obj1) {
          if (!__hasProp.call(obj1, key)) continue;
          val = obj1[key];
          obj[key] = val;
        }
      }
      if (obj2) {
        for (key in obj2) {
          if (!__hasProp.call(obj2, key)) continue;
          val = obj2[key];
          obj[key] = val;
        }
      }
      return obj;
    },
    to_https: function(addr) {
      if (addr.search("http://") >= 0) {
        return addr.replace("http://", "https://");
      }
      if (addr.search(/\./gi) >= 0) {
        addr = addr.replace(/[a-zA-Z]+:\/\//gi, "");
        return "https://" + addr;
      }
      if (addr.search(/^\//gi) < 0) {
        addr = "/" + addr;
      }
      return "https://" + window.location.hostname + addr;
    },
    to_uri: function(url) {
      var uri;
      uri = url.replace(/^http:\/\/[^\/]*/, "");
      uri = uri.replace(/^https:\/\/[^\/]*/, "");
      uri = uri.replace(/#.*$/, "");
      if (this.is_text_empty(uri)) {
        return "/";
      } else {
        return uri;
      }
    },
    get_hostname: function(url) {
      var host_match, protocol, protocol_match;
      protocol_match = /^[a-zA-Z]+:\/\//i.exec(url);
      protocol = "";
      if (protocol_match != null) {
        protocol = protocol_match[0];
        url = url.replace(protocol, "");
      }
      host_match = /^[^\/]+/i.exec(url);
      if (host_match != null) {
        return protocol + host_match[0];
      }
      return null;
    },
    to_url: function(url, uri) {
      var absolute, hostname, post_hostname, protocol;
      if (uri.match(/\..+\//gi)) {
        return uri;
      }
      protocol = url.match(/[a-z]+:\/\//gi);
      if (protocol === null) {
        protocol = "http://";
      } else {
        url = url.replace(protocol, "");
      }
      url = url.replace(/\?.+$/gi, "");
      url = url.replace(/[^\/]+\.[^\/]+$/gi, "");
      post_hostname = String(url.match(/\/.+$/gi));
      hostname = url.replace(post_hostname, "");
      if (post_hostname.charAt(post_hostname.length - 1) === "/") {
        post_hostname = post_hostname.substr(0, post_hostname.length - 1);
      }
      absolute = true;
      if (uri.charAt(0) !== "/") {
        absolute = false;
      }
      if (uri.match(/^\/\//gi)) {
        return protocol + url.replace(/^\/\//gi, "") + uri;
      }
      if (absolute) {
        return protocol + hostname + uri;
      } else {
        return protocol + hostname + post_hostname + "/" + uri;
      }
    },
    open_pop: function(url, width, height) {
      return window.open(url, "_blank", "toolbar=0,status=0,width=" + width + ",height=" + height);
    },
    get_window_scroll: function() {
      return Math.max($("body").scrollTop(), $("html, body").scrollTop());
    },
    get_window_top: function($obj) {
      var top, walker;
      walker = $obj[0].offsetParent;
      top = walker ? walker.offsetParent : 0;
      while (walker) {
        top += walker.offsetTop;
        walker = walker.offsetParent;
      }
      return top;
    },
    is_meta_key: function(e) {
      return e.ctrlKey || e.metaKey;
    },
    set_title: function(text) {
      return $(document).attr("title", text);
    },
    get_url_token_string: function(token, value) {
      return token + "=" + value;
    },
    get_url_var: function(token, url) {
      var url_map;
      url_map = this.get_url_vars(url);
      if (url_map[token]) {
        return url_map[token];
      } else {
        return null;
      }
    },
    get_url_vars: function(url) {
      var map, parts,
        _this = this;
      map = {};
      if (!(url != null)) {
        url = window.location.search;
      }
      parts = url.replace(/[?&]+([^=&]+)(=[^&]*)?/gi, function(m, key, value) {
        return map[key] = value === void 0 ? null : _this.url_decode(value.substring(1));
      });
      return map;
    },
    get_time: function() {
      var current_time, d;
      d = new Date();
      current_time = d.getTime();
      current_time += d.getTimezoneOffset() * 60000;
      return Math.floor(current_time / 1000);
    },
    get_time_ago: function(time) {
      var days, diff, hours, mins;
      diff = this.get_time() - time;
      if (diff < 60) {
        return "1 분 전";
      } else if (diff < 3600) {
        mins = Math.floor(diff / 60);
        if (mins === 1) {
          return "1 분 전";
        } else {
          return Math.floor(diff / 60) + " 분 전";
        }
      } else if (diff < 86400) {
        hours = Math.floor(diff / 3600);
        if (hours === 1) {
          return "1 시간 전";
        } else {
          return Math.floor(diff / 3600) + " 시간 전";
        }
      } else {
        days = Math.floor(diff / 86400);
        if (days === 1) {
          return "1 일 전";
        } else {
          return Math.floor(diff / 86400) + " 일 전";
        }
      }
    },
    get_monthdate_from_string: function(timestring) {
      return timestring.replace(/T.*$/gi, "");
    },
    get_time_from_string: function(timestring) {
      if (timestring === null) {
        return null;
      }
      timestring = (String(timestring)).replace(/-/g, "/").replace(/[TZ]/g, " ");
      timestring = timestring.replace(/\..*/gi, "");
      return Date.parse(timestring) / 1000.0;
    },
    get_time_ago_from_string: function(timestring) {
      var time;
      if (timestring === null) {
        return null;
      }
      timestring = (String(timestring)).replace(/-/g, "/").replace(/[TZ]/g, " ");
      timestring = timestring.replace(/\..*/gi, "");
      time = Date.parse(timestring) / 1000.0;
      return this.get_time_ago(time);
    },
    url_encode: function(source) {
      var encoded, regular;
      encoded = source;
      regular = new RegExp("/", "g");
      encoded = encodeURIComponent(encoded);
      encoded = encoded.replace(/\+/g, "%2B");
      encoded = encoded.replace(regular, "%2F");
      encoded = encoded.replace(/\&/g, "%26");
      return encoded;
    },
    url_decode: function(source) {
      var decoded;
      decoded = source;
      try {
        decoded = decodeURIComponent(decoded);
      } catch (x) {
        return false;
      }
      return decoded;
    },
    is_text_empty: function(text) {
      if (!text) {
        return true;
      }
      return text.replace(/\s/gi, "") === "";
    },
    strip_html: function(text, tag_to_strip) {
      if (!text) {
        return null;
      }
      text = text.replace(/<\s*\/?\s*([^>]*)\s*\/?\s*>/gi, function(match, tag) {
        var found, ii, match_lower, tag_lower, _i, _ref;
        if (tag_to_strip) {
          match_lower = match.toLowerCase();
          found = false;
          for (ii = _i = 0, _ref = tag_to_strip.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; ii = 0 <= _ref ? ++_i : --_i) {
            tag_lower = tag_to_strip[ii].toLowerCase();
            if (match_lower.search(tag_lower) >= 0) {
              found = true;
            }
          }
          if (!found) {
            return match;
          }
        }
        match = match.replace(/</gi, "&lt;");
        match = match.replace(/>/gi, "&gt;");
        return match;
      });
      return text;
    },
    escape_html: function(text) {
      if (text === null) {
        return null;
      }
      return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&apos;");
    },
    remove_html: function(text) {
      if (text === null) {
        return null;
      }
      return text.replace(/(<([^>]+)>)/ig, "");
    },
    is_html_text_empty: function(text) {
      if (!text) {
        return true;
      }
      text = text.replace(/<(.|\n)*?>/gi, "");
      text = text.replace(/\n/gi, "");
      text = text.replace(/\s/gi, "");
      text = text.replace(/&nbsp;/gi, "");
      return text === "";
    },
    is_int: function(s) {
      return parseInt(s) === s;
    },
    generate_parameter_string: function(tokens, url_encode) {
      var first, key, string, value;
      string = "";
      first = true;
      if (tokens) {
        for (key in tokens) {
          if (!__hasProp.call(tokens, key)) continue;
          value = tokens[key];
          if (!Utils.equals_null(value)) {
            if (!first) {
              string += "&";
            }
            if (typeof value === 'object') {
              value = JSON.stringify(value);
            }
            if (!url_encode) {
              string += key + "=" + value;
            } else {
              string += key + "=" + this.url_encode(value);
            }
            first = false;
          }
        }
      }
      return string;
    },
    get_object_from_parameter_string: function(string) {
      var map,
        _this = this;
      map = {};
      string.replace(/[?&]+([^=&]+)(=[^&]*)?/gi, function(m, key, value) {
        return map[key] = value === void 0 ? true : _this.url_decode(value.substring(1));
      });
      string.replace(/^([^=&]+)(=[^&]*)?/gi, function(m, key, value) {
        return map[key] = value === void 0 ? true : _this.url_decode(value.substring(1));
      });
      return map;
    },
    is_IE: function() {
      return navigator.appName.match(/Microsoft/gi);
    },
    get_IE_version: function() {
      if (navigator.appVersion.indexOf("MSIE") !== -1) {
        return parseFloat(navigator.appVersion.split("MSIE")[1]);
      }
      return null;
    },
    is_mobile: function() {
      var mobile;
      mobile = /iphone|ipad|ipod|android|blackberry|mini|windows\sce|palm/i.test(navigator.userAgent.toLowerCase());
      if (mobile) {
        return true;
      } else {
        return false;
      }
    },
    get_browser_width: function() {
      return $(window).width();
    },
    get_browser_height: function() {
      return $(window).height();
    },
    reload: function() {
      return window.location.reload(true);
    },
    json_to_object: function(str) {
      try {
        return JSON.parse(str);
      } catch (exception) {
        return str;
      }
    },
    parseInt: function(n) {
      if (!(n != null)) {
        return 0;
      }
      return parseInt(n);
    },
    get_linked_string: function(str, url, target) {
      var res;
      res = "<a href='" + url;
      if (target) {
        res += "' target='" + target;
      }
      res += "'>" + str + "</a>";
      return res;
    },
    newline_to_br: function(str) {
      if (str === null) {
        return str;
      }
      str = str.replace(/\r\n/g, "<br/>");
      str = str.replace(/\r/g, "<br/>");
      return str.replace(/\n/g, "<br/>");
    },
    equals_null: function(obj) {
      return obj === null || obj === void 0;
    },
    redirect_to: function(url) {
      if (this.is_text_empty(url)) {
        this.reload();
        return;
      }
      return window.location = url;
    },
    can_push_state: function() {
      if ($.browser.webkit && parseFloat($.browser.version) < 534.10) {
        return false;
      }
      return history && history.pushState;
    },
    is_valid_url: function(url) {
      var reg_url;
      reg_url = /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
      return reg_url.test(url);
    },
    shorten_str: function(str, lm) {
      if (str.length > lm) {
        return str.substr(0, lm - 2) + "..";
      } else {
        return str;
      }
    }
  };

  VideoUrlUtils = {
    youtube_reg_exp: /^http:\/\/(?:www\.)?youtube.com\/watch\?(?=.*v=((\w|-)+))(?:\S+)?$/,
    vimeo_reg_exp: /^http:\/\/(?:www\.)?vimeo\.com\/(?:clip\:)?(\d+).*$/,
    tvpot_reg_exp: /^http:\/\/(?:www\.)?tvpot.daum.net\/clip\/ClipViewByVid\.do\?vid=((\w|-|\$)+)$/,
    is_youtube_url: function(url) {
      return url.match(this.youtube_reg_exp);
    },
    is_vimeo_url: function(url) {
      return url.match(this.vimeo_reg_exp);
    },
    is_tvpot_url: function(url) {
      return url.match(this.tvpot_reg_exp);
    },
    convert_youtube_url: function(url) {
      return url.replace(this.youtube_reg_exp, 'http://www.youtube.com/embed/$1?wmode=transparent');
    },
    convert_vimeo_url: function(url) {
      return url.replace(this.vimeo_reg_exp, 'http://player.vimeo.com/video/$1');
    },
    convert_tvpot_url: function(url, width, height) {
      return url.replace(this.tvpot_reg_exp, "<object type='application/x-shockwave-flash' id='$1' width='" + width + "px' height='" + height + "px' align='middle' classid='clsid:d27cdb6e-ae6d-11cf-96b8-444553540000' codebase='http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0'><param name='movie' value='http://flvs.daum.net/flvPlayer.swf?vid=$1' /><param name='wmode' value='transparent' /><embed src='http://flvs.daum.net/flvPlayer.swf?vid=$1' width='" + width + "px' height='" + height + "px' wmode='transparent'></embed></object>");
    }
  };

}).call(this);
