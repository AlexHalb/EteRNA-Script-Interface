// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty;

  this.Block = (function() {

    function Block(header_vars, template_string_) {
      var extra_url, u_index;
      this.template_string_ = template_string_;
      this.header_vars_ = null;
      this.uris_ = null;
      this.default_params_ = null;
      this.template_tokens_ = null;
      this.template_context_variables_ = null;
      this.template_compiled_cache_ = new Object();
      if ((header_vars != null) && (header_vars['builder'] != null)) {
        this.builder_name_ = header_vars['builder'];
        this.builder_class_ = null;
      }
      if (header_vars['name'] != null) {
        this.name_ = header_vars['name'];
      } else {
        Utils.display_error("Block name does not exist");
        return;
      }
      if (header_vars['url'] != null) {
        this.set_uri(header_vars['url']);
        u_index = 2;
        while (extra_url = header_vars['url' + u_index]) {
          this.set_uri(extra_url);
          u_index++;
        }
      }
      if (header_vars['default'] != null) {
        this.set_default_params(ThemeCompiler.get_attr_value(header_vars['default']));
      }
      this.header_vars_ = header_vars;
    }

    Block.prototype.get_name = function() {
      return this.name_;
    };

    Block.prototype.build = function($container, block_params) {
      var builder, final_block_params, key, page_params, value;
      final_block_params = null;
      if (Application.GLOBAL_THEME_PARAMETERS != null) {
        final_block_params = Utils.clone_object(Application.GLOBAL_THEME_PARAMETERS);
        page_params = Page.current_parameters_;
        for (key in page_params) {
          if (!__hasProp.call(page_params, key)) continue;
          value = page_params[key];
          final_block_params[key] = value;
        }
      } else {
        final_block_params = Page.get_current_page_parameters();
      }
      this.fill_default_parameters(final_block_params);
      if (block_params != null) {
        for (key in block_params) {
          if (!__hasProp.call(block_params, key)) continue;
          value = block_params[key];
          final_block_params[key] = value;
        }
      }
      if (!(typeof builder !== "undefined" && builder !== null)) {
        if (this.builder_name_ != null) {
          if (!(this.builder_class_ != null)) {
            this.builder_class_ = window[this.builder_name_];
          }
          if (!(this.builder_class_ != null)) {
            Utils.display_error("Cannot find builder " + this.builder_name_);
            builder = new Builder();
          } else {
            builder = new this.builder_class_();
          }
        } else {
          builder = new Builder();
        }
      }
      builder.block_params_ = final_block_params;
      builder.build(this, $container, final_block_params);
      $container.set_builder(builder);
      return builder;
    };

    Block.prototype.add_block = function($container, block_params) {
      var $parent, builder, input, input_string, key, tag, val;
      if (input_string = this.header_vars_['input']) {
        if (!block_params) {
          block_params = new Object();
        }
        input = ThemeCompiler.get_attr_value(input_string);
        for (key in input) {
          if (!__hasProp.call(input, key)) continue;
          val = input[key];
          if (!block_params[key]) {
            block_params[key] = val;
          }
        }
      }
      tag = this.header_vars_['tag'];
      if (!(tag != null)) {
        tag = "div";
      }
      $parent = $("<" + tag + ">");
      $parent.attr(this.header_vars_);
      builder = this.build($parent, block_params);
      $container.append($parent);
      return builder;
    };

    Block.prototype.get_default_attrs = function() {
      return this.header_vars_;
    };

    Block.prototype.set_uri = function(uri) {
      var extra_param_names, key, param_names, uri_obj, uri_regex_string, value, vars,
        _this = this;
      if (!(this.uris_ != null)) {
        this.uris_ = new Array();
      }
      uri_obj = new Object();
      uri_obj['param_names'] = param_names = new Array();
      uri_obj['extra_param_names'] = extra_param_names = new Array();
      vars = Utils.get_url_vars(uri);
      for (key in vars) {
        if (!__hasProp.call(vars, key)) continue;
        value = vars[key];
        extra_param_names.push(key);
      }
      uri = String(uri.match(/^[^\?]*/));
      uri_regex_string = uri.replace(/{([^}]+)}/g, function(whole, param_name) {
        param_names.push(param_name);
        return "([^/]+)";
      });
      uri_regex_string = "^" + uri_regex_string + "$";
      uri_obj['uri'] = uri;
      uri_obj['regex'] = new RegExp(uri_regex_string, "i");
      return this.uris_.push(uri_obj);
    };

    Block.prototype.set_default_params = function(params) {
      return this.default_params_ = params;
    };

    Block.prototype.match_uri_and_fill_parameters = function(uri, block_params) {
      var ii, match, ui, uri_obj, uri_param_names, uri_regex, _i, _j, _ref, _ref1;
      if (!(this.uris_ != null)) {
        Utils.display_error("URI regex does not exist");
        return false;
      }
      if (!(block_params != null)) {
        block_params = new Object();
      }
      for (ui = _i = 0, _ref = this.uris_.length - 1; _i <= _ref; ui = _i += 1) {
        uri_obj = this.uris_[ui];
        uri_regex = uri_obj['regex'];
        uri_param_names = uri_obj['param_names'];
        if (match = uri_regex.exec(uri)) {
          for (ii = _j = 0, _ref1 = uri_param_names.length - 1; _j <= _ref1; ii = _j += 1) {
            block_params[uri_param_names[ii]] = match[ii + 1];
          }
          this.fill_default_parameters(block_params);
          return true;
        }
      }
      return false;
    };

    Block.prototype.generate_url = function(params, index) {
      var final_params, ii, key, page_params, params_string, params_string_needed, params_to_use, uri, uri_extra_param_names, uri_obj, url, val, value, _i, _ref;
      if (!index) {
        index = 0;
      }
      if (!(this.uris_ != null)) {
        return null;
      }
      if (!(this.uris_[index] != null)) {
        return null;
      }
      uri_obj = this.uris_[index];
      uri = uri_obj['uri'];
      uri_extra_param_names = uri_obj['extra_param_names'];
      if (this.default_params_ != null) {
        final_params = Utils.clone_object(this.default_params_);
      } else {
        final_params = new Object();
      }
      page_params = Page.get_current_page_parameters();
      for (key in page_params) {
        if (!__hasProp.call(page_params, key)) continue;
        value = page_params[key];
        final_params[key] = value;
      }
      if (params != null) {
        for (key in params) {
          if (!__hasProp.call(params, key)) continue;
          value = params[key];
          final_params[key] = value;
        }
      }
      url = ThemeCompiler.evaluate_safe(uri, final_params);
      params_string = "";
      params_string_needed = false;
      params_to_use = new Object();
      for (ii = _i = 0, _ref = uri_extra_param_names.length - 1; _i <= _ref; ii = _i += 1) {
        if ((val = final_params[uri_extra_param_names[ii]]) != null) {
          params_to_use[uri_extra_param_names[ii]] = val;
          params_string_needed = true;
        }
      }
      if (params_string_needed) {
        return url + "?" + Utils.generate_parameter_string(params_to_use);
      }
      return url;
    };

    Block.prototype.fill_default_parameters = function(params) {
      var default_params, key, value, _results;
      if ((params != null) && (this.default_params_ != null)) {
        default_params = this.default_params_;
        _results = [];
        for (key in default_params) {
          if (!__hasProp.call(default_params, key)) continue;
          value = default_params[key];
          if (!(params[key] != null)) {
            _results.push(params[key] = value);
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    return Block;

  })();

  this.Builder = (function() {

    function Builder() {
      this.title_ = null;
      this.block_params_ = null;
      this.$container_ = null;
    }

    Builder.prototype.bind_window_callbacks = function() {};

    Builder.prototype.build = function(block, $container, params) {
      this.$container_ = $container;
      return this.on_build(block, $container, params);
    };

    Builder.prototype.on_build = function(block, $container, params) {
      return ThemeCompiler.compile_block(block, params, $container);
    };

    Builder.prototype.get_element = function(token) {
      var $res;
      if (this.$container_ != null) {
        $res = this.$container_.find("#" + token);
        if ($res.exists()) {
          return $res;
        } else {
          return null;
        }
      } else {
        return null;
      }
    };

    Builder.prototype.get_params = function() {
      return this.block_params_;
    };

    Builder.prototype.get_container = function() {
      return this.$container_;
    };

    return Builder;

  })();

}).call(this);
